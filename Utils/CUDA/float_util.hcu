#ifndef FLOAT_UTIL_H
#define FLOAT_UTIL_H

/*******************************************************
 *
 *   Utility functions for float vector types
 *   float2, float3, float4
 *
 ******************************************************/

#include <vector_functions.h>
#include <Math/Vector.h>

using namespace OpenEngine::Math;

inline __host__ float3 make_float3(Vector<3, float> v){
    float3 r;
    r.x = v[0];
    r.y = v[1];
    r.z = v[2];
    return r;
}

inline __host__ __device__ bool operator >= (float3 v, float f){
    return v.x >= f && v.y >= f && v.z >= f;
}

inline __host__ __device__ bool operator >= (float3 v, float3 w){
    return v.x >= w.x && v.y >= w.y && v.z >= w.z;
}

inline __host__ __device__ float prod(float2 f)
{
  return f.x*f.y;
}

inline __host__ __device__ float prod(float3 f)
{
  return f.x*f.y*f.z;
}

inline __host__ __device__ float prod(float4 f)
{
  return f.x*f.y*f.z*f.w;
}

inline __host__ __device__ float2 float4_to_float2(float4 f)
{
  float2 val;
  val.x = f.x;
  val.y = f.y;
  return val;
}

inline __host__ __device__ float3 float4_to_float3(float4 f)
{
  float3 val;
  val.x = f.x;
  val.y = f.y;
  val.z = f.z;
  return val;
}

inline __host__ __device__ float4 float2_to_float4_with_ones(float2 ui)
{
  float4 val;
  val.x = ui.x;
  val.y = ui.y;
  val.z = 1;
  val.w = 1;
  return val;
}

inline __host__ __device__ float3 float2_to_float3_with_ones(float2 ui)
{
  float3 val;
  val.x = ui.x;
  val.y = ui.y;
  val.z = 1;
  return val;
}

inline __host__ __device__ float get_last_dim(float2 ui)
{
  return ui.y;
}

inline __host__ __device__ float get_last_dim(float3 ui)
{
  return ui.z;
}

inline __host__ __device__ float get_last_dim(float4 ui)
{
  return ui.w;
}

inline __host__ __device__ unsigned int crop_last_dim(float2 f)
{
  return f.x;
}

inline __host__ __device__ float2 crop_last_dim(float3 f)
{
  return make_float2( f.x, f.y );
}

inline __host__ __device__ float3 crop_last_dim(float4 f)
{
  return make_float3( f.x, f.y, f.z );
}

#endif
